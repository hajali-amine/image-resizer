name: Image Resizer CI/CD Pipeline.

on:
  push:
    branches: [ main ]

jobs:
  # test:
  #   runs-on: ubuntu-latest
  #   env:
  #     AWS_ACCESS_KEY: ${{ secrets.AWS_ACCESS_KEY }}
  #     AWS_SECRET_KEY: ${{ secrets.AWS_SECRET_KEY }}
  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v2
  #     - name: Set up JDK 11
  #       uses: actions/setup-java@v2
  #       with:
  #         java-version: '11'
  #         distribution: 'temurin'
  #         cache: maven

  #     - name: Run tests with Maven
  #       run: mvn clean test

  # build-release:
  #   runs-on: ubuntu-latest
  #   needs:
  #     - test
  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v3

  #     - name: Login to Dockerhub
  #       uses: docker/login-action@v1
  #       with:
  #         username: ${{ secrets.DOCKER_HUB_USERNAME }}
  #         password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

  #     - name: Set up Docker Buildx
  #       uses: docker/setup-buildx-action@v1

  #     - name: Build Docker image and push to Dockerhub
  #       uses: docker/build-push-action@v2
  #       with:
  #         context: .
  #         file: ./Dockerfile
  #         push: true
  #         tags: ${{ secrets.DOCKER_HUB_USERNAME }}/image-resizer:${{ github.sha }}
  
  # e2e-test:
  #   runs-on: ubuntu-latest
  #   env:
  #     AWS_ACCESS_KEY: ${{ secrets.AWS_ACCESS_KEY }}
  #     AWS_SECRET_KEY: ${{ secrets.AWS_SECRET_KEY }}
  #   needs:
  #     - build-release
  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v3
  #     - name: Set-up Python
  #       uses: actions/setup-python@v3
  #       with:
  #         python-version: '3.x'
  #     - name: Run E2E test
  #       run: |
  #         python -m pip install -r e2e/requirements.txt
  #         docker pull ${{ secrets.DOCKER_HUB_USERNAME }}/image-resizer:${{ github.sha }}
  #         docker run -d -e "AWS_ACCESS_KEY=${{ secrets.AWS_ACCESS_KEY }}" -e "AWS_SECRET_KEY=${{ secrets.AWS_SECRET_KEY }}" -p 8080:8080 --name resizer ${{ secrets.DOCKER_HUB_USERNAME }}/image-resizer:${{ github.sha }}
  #         sleep 10
  #         python e2e/e2e.py

  iac-provisioning:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: infra/
    # needs:
    #   - e2e-test
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Set-up terraform 
        uses: hashicorp/setup-terraform@v2
      - name: Provisioning
        working-directory: ./infra
        run: |
          ls
          echo "${{ secrets.AWS_EC2_PUBLIC_KEY }}" >> ./keys/key.pub
          echo "${{ secrets.TF_TFVARS }}" >> ./terraform.tfvars
          terraform init -input=false && terraform plan -input=false -compact-warnings -out=plan.file && terraform apply -input=false -compact-warnings plan.file

  # The EC2 instance is ready and has docker installed
  # deploy:
  #   runs-on: ubuntu-latest
  #   needs:
  #     - e2e-test
  #   steps:
  #     - name: Deploy to EC2
  #       run: |
  #         which ssh-agent || ( apt-get update -y && apt-get install openssh-client -y )
  #         mkdir -p ~/.ssh
  #         eval $(ssh-agent -s)
  #         echo "${{ secrets.AWS_EC2_PRIVATE_KEY  }}" > private_key.pem
  #         chmod 400 private_key.pem
  #         ssh -o "StrictHostKeyChecking=no" -i "private_key.pem" ${{ secrets.EC2_USERNAME  }}@${{ secrets.EC2_HOSTNAME  }} ' 
  #         whoami
  #         sudo docker image rm $(sudo docker images -q)
  #         sudo docker kill resizer
  #         sudo docker container rm resizer
  #         sudo docker pull ${{ secrets.DOCKER_HUB_USERNAME }}/image-resizer:${{ github.sha }}
  #         sudo docker run -d -e "AWS_ACCESS_KEY=${{ secrets.AWS_ACCESS_KEY }}" -e "AWS_SECRET_KEY=${{ secrets.AWS_SECRET_KEY }}" -p 8080:8080 --name resizer ${{ secrets.DOCKER_HUB_USERNAME }}/image-resizer:${{ github.sha }}
  #         '
